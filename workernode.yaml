---
- name: Join Kubernetes Worker Nodes on RHEL 9
  hosts: worker
  become: true
  vars:
    kubernetes_version: "1.31"
    docker_ce_repo_url: "https://download.docker.com/linux/rhel/docker-ce.repo"
    cri_dockerd_version: "0.3.16"
    cni_plugins_version: "v1.5.0"

  tasks:
    - name: Disable Swap
      block:
        - name: Disable swap immediately
          command: swapoff -a
        - name: Comment out swap entries in /etc/fstab
          replace:
            path: /etc/fstab
            regexp: '^([^#].*swap.*)$'
            replace: '#\1'
      when: ansible_os_family == "RedHat"  # Optional: Only if you're sure this is for RHEL-based systems

    - name: Configure sysctl parameters
      block:
        - name: Create k8s.conf for modules
          copy:
            dest: /etc/modules-load.d/k8s.conf
            content: |
              overlay
              br_netfilter
            owner: root
            group: root
            mode: '0644'
        - name: Load kernel modules
          command: modprobe "{{ item }}"
          loop:
            - overlay
            - br_netfilter
        - name: Create k8s.conf for sysctl
          copy:
            dest: /etc/sysctl.d/k8s.conf
            content: |
              net.bridge.bridge-nf-call-iptables  = 1
              net.bridge.bridge-nf-call-ip6tables = 1
              net.ipv4.ip_forward      = 1
            owner: root
            group: root
            mode: '0644'
        - name: Apply sysctl parameters
          command: sysctl --system
      when: ansible_os_family == "RedHat"

    - name: Set SELinux to permissive
      block:
        - name: Set SELinux to permissive (current session)
          command: setenforce 0
          ignore_errors: true
        - name: Set SELinux to permissive (config file)
          replace:
            path: /etc/selinux/config
            regexp: '^SELINUX=enforcing$'
            replace: 'SELINUX=permissive'
      when: ansible_selinux.status != "disabled"

    - name: Add target hostname to 127.0.0.1 line in /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.0\.1\s+.*$'
        line: "{{ updated_line }}"
        backrefs: true
      vars:
        hostname: "{{ ansible_hostname }}"
        current_line: "{{ lookup('file', '/etc/hosts') | regex_search('(?m)^127\\.0\\.0\\.1\\s+.*') }}"
        updated_line: >-
          {{ current_line + ' ' + hostname if hostname not in current_line else current_line }}

    - name: Install firewalld and python3-firewall
      ansible.builtin.package:
        name:
          - firewalld
          - python3-firewall
        state: present

    - name: Ensure firewalld is running
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: true

    - name: Open required firewall ports manually
      command: "firewall-cmd --permanent --add-port={{ item }}"
      loop:
        - 10250/tcp
        - 30000-32767/tcp
      notify: Reload Firewall
      when: ansible_os_family == "RedHat"

    - name: Install Docker Engine
      block:
        - name: Uninstall old Docker versions
          dnf:
            name:
              - docker
              - docker-client
              - docker-client-latest
              - docker-common
              - docker-latest
              - docker-latest-logrotate
              - docker-logrotate
              - docker-engine
              - podman
              - runc
            state: absent
        - name: Install dnf-plugins-core
          dnf:
            name: dnf-plugins-core
            state: present
        - name: Add Docker CE repository
          command: dnf config-manager --add-repo "{{ docker_ce_repo_url }}"
        - name: Install Docker Engine, CLI, containerd, buildx, and compose
          dnf:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present
        - name: Start and enable Docker service
          systemd:
            name: docker
            state: started
            enabled: true
        - name: Set Docker daemon.json with systemd cgroup driver
          copy:
            dest: /etc/docker/daemon.json
            content: |
              {
                "exec-opts": ["native.cgroupdriver=systemd"],
                "log-driver": "json-file",
                "log-opts": {
                  "max-size": "100m"
                },
                "storage-driver": "overlay2"
              }
            force: yes
        - name: Restart Docker service after config change
          systemd:
            name: docker
            state: restarted
      when: ansible_os_family == "RedHat"

    - name: Install cri-dockerd
      block:
        - name: Download cri-dockerd binary
          get_url:
            url: "https://github.com/Mirantis/cri-dockerd/releases/download/v{{ cri_dockerd_version }}/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz"
            dest: /tmp/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz
        - name: Extract cri-dockerd binary
          unarchive:
            src: /tmp/cri-dockerd-{{ cri_dockerd_version }}.amd64.tgz
            dest: /tmp/
            remote_src: true
        - name: Install cri-dockerd binary
          command: install -o root -g root -m 0755 /tmp/cri-dockerd/cri-dockerd /usr/local/bin/cri-dockerd
        - name: Create cri-docker.service
          copy:
            dest: /etc/systemd/system/cri-docker.service
            content: |
              [Unit]
              Description=CRI Dockerd
              Documentation=https://github.com/Mirantis/cri-dockerd
              After=network.target
              [Service]
              ExecStart=/usr/local/bin/cri-dockerd --pod-infra-container-image=registry.k8s.io/pause:3.10
              Restart=always
              RestartSec=10s
              LimitNOFILE=infinity
              LimitNPROC=infinity
              LimitCORE=infinity
              TasksMax=infinity
              [Install]
              WantedBy=multi-user.target
            owner: root
            group: root
            mode: '0644'
        - name: Create cri-docker.socket
          copy:
            dest: /etc/systemd/system/cri-docker.socket
            content: |
              [Unit]
              Description=CRI Dockerd Socket
              [Socket]
              ListenStream=/run/cri-dockerd.sock
              SocketMode=0660
              SocketUser=root
              SocketGroup=docker
              [Install]
              WantedBy=sockets.target
            owner: root
            group: root
            mode: '0644'
        - name: Reload systemd daemon
          command: systemctl daemon-reload
        - name: Enable and start cri-docker service and socket
          systemd:
            name: "{{ item }}"
            state: started
            enabled: true
          loop:
            - cri-docker.socket
            - cri-docker.service
      when: ansible_os_family == "RedHat"

    - name: Install CNI plugins
      block:
        - name: Download CNI plugins
          get_url:
            url: "https://github.com/containernetworking/plugins/releases/download/{{ cni_plugins_version }}/cni-plugins-linux-amd64-{{ cni_plugins_version }}.tgz"
            dest: /tmp/cni-plugins-linux-amd64-{{ cni_plugins_version }}.tgz
        - name: Create CNI bin directory
          file:
            path: /opt/cni/bin
            state: directory
            mode: '0755'
        - name: Extract CNI plugins
          unarchive:
            src: /tmp/cni-plugins-linux-amd64-{{ cni_plugins_version }}.tgz
            dest: /opt/cni/bin
            remote_src: true
      when: ansible_os_family == "RedHat"

    - name: Install Kubernetes components (kubeadm, kubelet, kubectl)
      block:
        - name: Create Kubernetes YUM repository
          copy:
            dest: /etc/yum.repos.d/kubernetes.repo
            content: |
              [kubernetes]
              name=Kubernetes
              baseurl=https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/
              enabled=1
              gpgcheck=1
              repo_gpgcheck=1
              gpgkey=https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/repodata/repomd.xml.key
            owner: root
            group: root
            mode: '0644'
        - name: Install kubelet, kubeadm, and kubectl
          dnf:
            name:
              - kubelet
              - kubeadm
              - kubectl
            state: present
        - name: Install dnf-command(versionlock)
          dnf:
            name: 'dnf-command(versionlock)'
            state: present
        - name: Lock Kubernetes package versions
          command: dnf versionlock add kubelet-{{ kubernetes_version }}* kubeadm-{{ kubernetes_version }}* kubectl-{{ kubernetes_version }}*
        - name: Enable and start kubelet service
          systemd:
            name: kubelet
            state: started
            enabled: true
      when: ansible_os_family == "RedHat"

    - name: Copy join command to worker nodes
      copy:
        src: ./output/join_command.txt
        dest: /tmp/join_command.txt

    - name: Read join command from file
      command: cat /tmp/join_command.txt
      register: join_command

    - name: Join the worker node to the cluster
      command: "{{ join_command.stdout }} --cri-socket unix:///var/run/cri-dockerd.sock"

    - name: Enable chronyd service
      systemd:
        name: chronyd
        state: started
        enabled: true

  handlers:
    - name: Reload Firewall
      command: firewall-cmd --reload
      when: ansible_os_family == "RedHat"
